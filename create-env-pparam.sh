#!/bin/bash
# create-env-pparam.sh
# Zachary Klima

# New version of create-env for Positional Parameters assignment.

# Check number of params.
want=5
if [ $# -ne $want ];
then
  echo -e "You must specify $want parameters! You provided $#.\nExiting..."
  exit 1 # abnormal termination
fi

# I think we'll just assume the user put these in correctly.

grpname="$3" # sec group name
keyname="$2" # key name
amimage="$1" # image ID
coun=$5     # count
lbn="cenv-lb"
asgn="cenv-asg"
lc="$4"      # launch config name

echo "Creating security group..."
sg=$(aws ec2 create-security-group --group-name $grpname --desc "SG generated by create-env.sh" &)
wait
echo "Authorizing 0.0.0.0/0 for TCP:22..."
aws ec2 authorize-security-group-ingress --group-name $grpname --protocol tcp --port 22 --cidr 0.0.0.0/0 &
wait
echo "Authorizing 0.0.0.0/0 for TCP:80..."
aws ec2 authorize-security-group-ingress --group-name $grpname --protocol tcp --port 80 --cidr 0.0.0.0/0 &
wait
echo "Creating key pair..."
aws ec2 create-key-pair --key-name $keyname --query 'KeyMaterial' --output text > $keyname.pem &
wait
echo -e "Key pair contents written to $keyname.pem.\nChanging permissions..."
chmod 700 $keyname.pem
echo "Starting $coun instances..."
aws ec2 run-instances --image-id $amimage --key-name $keyname --security-group-ids $sg --instance-type t2.micro --client-token environment --count $coun &
wait
echo "Creating load balancer..."
lb=$(aws elb create-load-balancer --load-balancer-name $lbn --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --availability-zones us-west-2b &)
wait
echo "Registering instances with balancer..."
# this only finds the first three lines with an instance name in it
inst1=$(aws ec2 describe-instances | grep -o "i-[A-Za-z0-9]\{10,\}" | cut -d$'\n' -f1) &
inst2=$(aws ec2 describe-instances | grep -o "i-[A-Za-z0-9]\{10,\}" | cut -d$'\n' -f2) &
inst3=$(aws ec2 describe-instances | grep -o "i-[A-Za-z0-9]\{10,\}" | cut -d$'\n' -f3) &
wait
aws elb register-instances-with-load-balancer --load-balancer-name $lbn --instances $inst1 &
aws elb register-instances-with-load-balancer --load-balancer-name $lbn --instances $inst2 &
aws elb register-instances-with-load-balancer --load-balancer-name $lbn --instances $inst3 &
wait
echo "Creating autoscaling..."
aws autoscaling create-launch-configuration --launch-configuration-name $lc --image-id $amimage --key-name $keyname --instance-type t2.micro
aws autoscaling create-auto-scaling-group --auto-scaling-group-name $asgn --launch-configuration-name $lc --availability-zones us-west-2b --load-balancer-names $lbn --min-size 2 --max-size 5 --desired-capacity 4

# Dump stuff to file so destroy-env knows what to take care of.
echo "Writing variables to file..."
echo -e "Group name = $grpname\nKey name = $keyname\nAMI Image = $amimage" > env.dat
echo -e "Load balancer = $lbn\nSecurity group = $sg\nKey Pair = $keyname.pem" >> env.dat
echo -e "Launch configuration = $lc\nAutoscaling group name = $asgn" >> env.dat
exit 0
